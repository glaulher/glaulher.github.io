{"pageProps":{"frontmatter":{"title":"Componente de paginação em react","metaDesc":"A paginação é um recurso que permite dividir grandes conjuntos de dados em páginas","author":"Glaulher Medeiros","socialImage":"images/banner/PaginateBanner.png","date":"2023-03-14 16:34:00 -0300","categories":["Blogging","Tutorial"],"tags":["Component","React"]},"content":"\n***\n\nA paginação é um recurso que permite dividir grandes conjuntos de dados em páginas facilitando a visualização e a navegação para o usuário, é amplamente utilizado em interfaces que precisam lidar com grandes volumes de dados.\n\nPara criar um componete de paginação de exemplo utilizarei o vite:\n\n```shell\nnpm create vite@latest paginate -- --template  \n```\n\nNo próximo passo escolher react:\n\n```shell\n? Select a framework: › - Use arrow-keys. Return to submit.\n    Vanilla\n    Vue\n❯   React\n    Preact\n    Lit\n    Svelte\n    Others\n```\n\nNo próximo passo escolher typescript:\n\n```shell\n✔ Select a framework: › React\n? Select a variant: › - Use arrow-keys. Return to submit.\n    JavaScript\n❯   TypeScript\n    JavaScript + SWC\n    TypeScript + SWC\n```\n\nEntrar na pasta e rodar o `npm install`\n\n```shell\n✔ Select a framework: › React\n✔ Select a variant: › TypeScript\n\nScaffolding project in ~/Documentos/teste/paginate...\n\nDone. Now run:\n\n  cd paginate\n  npm install\n  npm run dev\n```\n\nCriar na raiz do projeto o arquivo `.eslintrc.json`, instalar o pacote a seguir:\n\n```shell\nnpm i -D @rocketseat/eslint-config\n```\n\nAbrir o arquivo `.eslintrc.json` e deixar conforme a seguir:\n\n```javascript\n{\n  \"extends\": \"@rocketseat/eslint-config/react\"\n  // \"extends\": \"@rocketseat/eslint-config/node\"\n}\n```\n\n[Baixe](https://raw.githubusercontent.com/glaulher/example/paginate/src/data/mock-data.json ) o arquivo mock-data.json e coloque em  `src/data/` ,  crie `Pagination.tsx` dentro de `src/`e deixe conforme a seguir:\n\n```javascript\nimport React from 'react'\nimport { usePagination, DOTS } from './usePagination'\nimport './pagination.scss'\n\ntype PaginationProps = {\n  onPageChange: (page: number) => void\n  totalCount: number\n  siblingCount: number\n  currentPage: number\n  pageSize: number\n  className: string\n}\n\nconst Pagination = ({\n  onPageChange,\n  totalCount,\n  siblingCount = 1,\n  currentPage,\n  pageSize,\n}: PaginationProps) => {\n  const paginationRange = usePagination({\n    currentPage,\n    totalCount,\n    siblingCount,\n    pageSize,\n  })\n\n  if (currentPage === 0 || paginationRange!.length < 2) {\n    return null\n  }\n\n  const onNext = () => {\n    onPageChange(currentPage + 1)\n  }\n\n  const onPrevious = () => {\n    onPageChange(currentPage - 1)\n  }\n\n  const lastPage = paginationRange![paginationRange!.length - 1]\n  return (\n    <ul className=\"pagination-container\">\n      <li\n        className={`pagination-item ${currentPage === 1 && 'disabled'}`}\n        onClick={onPrevious}\n      >\n        <div className=\"arrow left\" />\n      </li>\n      {paginationRange!.map((pageNumber) => {\n        if (pageNumber === DOTS) {\n          return (\n            <li key={pageNumber} className=\"pagination-item dots\">\n              &#8230;\n            </li>\n          )\n        }\n\n        return (\n          <li\n            className={`pagination-item ${\n              pageNumber === currentPage && 'selected'\n            }`}\n            onClick={() => onPageChange(Number(pageNumber))}\n            key={pageNumber}\n          >\n            {pageNumber}\n          </li>\n        )\n      })}\n      <li\n        className={`pagination-item ${currentPage === lastPage && 'disabled'}`}\n        onClick={onNext}\n      >\n        <div className=\"arrow right\" />\n      </li>\n    </ul>\n  )\n}\n\nexport default Pagination\n```\n\nCrie  `pagination.scss`  dentro de `src/` deixando conforme abaixo:\n\n```javascript\n.pagination-container {\n  display: flex;\n  list-style-type: none;\n\n  .pagination-item {\n    padding: 0 12px;\n    height: 32px;\n    text-align: center;\n    margin: auto 4px;\n    color: rgba(0, 0, 0, 0.87);\n    display: flex;\n    box-sizing: border-box;\n    align-items: center;\n    letter-spacing: 0.01071em;\n    border-radius: 16px;\n    line-height: 1.43;\n    font-size: 13px;\n    min-width: 32px;\n\n    &.dots:hover {\n      background-color: transparent;\n      cursor: default;\n    }\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.04);\n      cursor: pointer;\n    }\n\n    &.selected {\n      background-color: rgba(0, 0, 0, 0.08);\n    }\n\n    .arrow {\n      &::before {\n        position: relative;\n        /* top: 3pt; Remova essa linha do comentário para baixar os ícones conforme solicitado nos comentários*/\n        content: '';\n        /* Usando uma escala em, as setas terão o tamanho acompanhando a fonte */\n        display: inline-block;\n        width: 0.4em;\n        height: 0.4em;\n        border-right: 0.12em solid rgba(0, 0, 0, 0.87);\n        border-top: 0.12em solid rgba(0, 0, 0, 0.87);\n      }\n\n      &.left {\n        transform: rotate(-135deg) translate(-50%);\n      }\n\n      &.right {\n        transform: rotate(45deg);\n      }\n    }\n\n    &.disabled {\n      pointer-events: none;\n\n      .arrow::before {\n        border-right: 0.12em solid rgba(0, 0, 0, 0.43);\n        border-top: 0.12em solid rgba(0, 0, 0, 0.43);\n      }\n\n      &:hover {\n        background-color: transparent;\n        cursor: default;\n      }\n    }\n  }\n}\n```\n\nInstale  o pacote `sass`:\n\n```shell\nnpm i sass\n```\n\n#### Sobre Pagination:\n\nPagination usa um hook personalizado chamado `usePagination` para calcular quais páginas devem ser exibidas e em que ordem.\n\nO componente renderiza uma lista de números de página, com a página atual destacada. O usuário poderá navegar pelos resultados da  lista dividida em várias páginas.\n\n Propriedades do componente:\n\n- onPageChange: uma função que será chamada quando o usuário clicar em um número de página. Ela recebe como parâmetro o número da página que o usuário selecionou.\n- totalCount: o número total de itens que serão paginados.\n- siblingCount: o número de links de página exibidos à esquerda e à direita do link da página atual. O padrão é 1.\n- currentPage: o número da página atual.\n- pageSize: o número de itens exibidos em cada página.\n\nO componente usa a função usePagination para gerar uma matriz de números de página que deve ser exibida ao usuário. Essa função recebe como parâmetros a página atual, o número total de itens, o número de links  e o tamanho da página.\n\nA função usePagination retorna uma matriz de números de página que deve ser exibida na interface do usuário. Ela também pode incluir um valor especial DOTS, que é usado para indicar que há mais páginas entre as que já estão sendo exibidas.\n\nO componente usa o currentPage e o paginationRange para gerar a lista de números de página que serão exibidos para o usuário. Ele também usa as funções onNext e onPrevious para permitir que o usuário navegue para a próxima ou para a página anterior, respectivamente.\n\nO componente renderiza a lista de números de página em uma lista não ordenada HTML (\\<ul>), com cada número de página sendo um item de lista (\\<li>). O item da lista atual é destacado com a classe CSS \"selected\".\n\nO componente também renderiza setas para permitir que o usuário navegue para a próxima ou para a página anterior. Se o usuário estiver na primeira ou na última página, o componente desativa o link correspondente para que ele não possa ser clicado.\n\n\n\nCrie `usePagination.ts` dentro de `src/`e deixe conforme a seguir:\n\n```javascript\nimport { useMemo } from 'react'\n\nexport const DOTS = '...'\n\ninterface Props {\n  totalCount: number\n  pageSize: number\n  siblingCount: number\n  currentPage: number\n}\n\nconst range = (start: number, end: number) => {\n  const length = end - start + 1\n  return Array.from({ length }, (_, idx) => idx + start)\n}\n\nexport const usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage,\n}: Props) => {\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize)\n   \n    const totalPageNumbers = siblingCount + 5\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount)\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1)\n    const rightSiblingIndex = Math.min(\n      currentPage + siblingCount,\n      totalPageCount,\n    )\n\n   \n    const shouldShowLeftDots = leftSiblingIndex > 2\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2\n\n    const firstPageIndex = 1\n    const lastPageIndex = totalPageCount\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount\n      const leftRange = range(1, leftItemCount)\n\n      return [...leftRange, DOTS, totalPageCount]\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount\n      const rightRange = range(\n        totalPageCount - rightItemCount + 1,\n        totalPageCount,\n      )\n      return [firstPageIndex, DOTS, ...rightRange]\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex)\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]\n    }\n    return undefined\n  }, [totalCount, pageSize, siblingCount, currentPage])\n\n  return paginationRange\n}\n\n```\n\n\n\n#### Sobre usePagination:\n\nEste código é  responsável por retornar uma lista de páginas a serem exibidas em um componente de paginação, dado um conjunto de parâmetros de entrada, como o número total de itens, o número de itens por página, o número de itens vizinhos a serem exibidos à esquerda e à direita da página atual e a página atual.\n\nA função `range` é uma função que cria um array de números inteiros de um intervalo específico.\n\nO hook calcula o número total de páginas necessárias, em seguida, calcula o número total de páginas que devem ser exibidas (incluindo páginas vizinhas e pontos de suspensão), que é definido como `siblingCount + 5`.\n\nSe o número total de páginas for menor ou igual ao número total de páginas que devem ser exibidas, a função simplesmente retorna um array contendo todas as páginas de 1 a `totalPageCount`.\n\nSe o número total de páginas for maior que o número total de páginas que devem ser exibidas, a função calculará quais páginas vizinhas devem ser exibidas com base na página atual e no número de páginas vizinhas desejadas. A função também calcula se os pontos de suspensão devem ser exibidos à esquerda ou à direita, com base nas páginas vizinhas calculadas anteriormente.\n\nA função `useMemo` é usada para armazenar em cache o resultado da lista de páginas, garantindo que ela só seja recalculada quando as dependências (total de itens, número de itens por página, número de itens vizinhos e página atual) mudarem.\n\nNo final, o hook retorna a lista de páginas calculada.\n\n\n\n![gif pagination](/images/posts/paginate.gif)\n\n\n"},"__N_SSG":true}
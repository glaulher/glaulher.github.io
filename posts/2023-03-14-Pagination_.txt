1:"$Sreact.fragment"
2:I[78534,["742","static/chunks/742-565a7562c8d1d87c.js","177","static/chunks/app/layout-cec4dd7bee3452ec.js"],"Providers"]
3:I[6538,["742","static/chunks/742-565a7562c8d1d87c.js","177","static/chunks/app/layout-cec4dd7bee3452ec.js"],"WrapperHeader"]
4:I[15244,[],""]
5:I[43866,[],""]
7:I[86213,[],"OutletBoundary"]
9:I[86213,[],"MetadataBoundary"]
b:I[86213,[],"ViewportBoundary"]
d:I[34835,[],""]
:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d5e5fa7de236218a.css","style"]
:HL["/_next/static/css/4639d7b613416f5d.css","style"]
0:{"P":null,"b":"Ft8L_QBwRg98gt2A9_ABM","p":"","c":["","posts","2023-03-14-Pagination_"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","2023-03-14-Pagination_","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d5e5fa7de236218a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/favicon/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/favicon/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/favicon/safari-pinned-tab.svg","color":"#000000"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon/favicon.ico"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"msapplication-config","content":"/favicon/browserconfig.xml"}],["$","meta",null,{"name":"theme-color","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-slate-100\n            dark:bg-gray-900\n            dark:from-gray-900\n            dark:to-gray-800 \n            bg-gradient-to-r \n            h-screen \n            __className_d65c78","children":[["$","$L2",null,{"children":[["$","$L3",null,{}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],["$","footer",null,{"className":"bg-gray-700  mt-1 py-4","children":["$","div",null,{"className":"container mx-auto flex justify-center","children":["$","span",null,{"className":"mx-auto text-neutral-200","children":"© 2025 GrmDevTips"}]}]}]]}]]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","2023-03-14-Pagination_","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4639d7b613416f5d.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","_cFiAml1mXM0R04Sfty7G",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[48173,["742","static/chunks/742-565a7562c8d1d87c.js","688","static/chunks/688-2ba1992c7a7e345a.js","858","static/chunks/app/posts/%5Bslug%5D/page-b06279caf317e001.js"],""]
f:I[87970,["742","static/chunks/742-565a7562c8d1d87c.js","688","static/chunks/688-2ba1992c7a7e345a.js","858","static/chunks/app/posts/%5Bslug%5D/page-b06279caf317e001.js"],"Image"]
10:I[85301,["742","static/chunks/742-565a7562c8d1d87c.js","688","static/chunks/688-2ba1992c7a7e345a.js","858","static/chunks/app/posts/%5Bslug%5D/page-b06279caf317e001.js"],"PostBody"]
11:T2d12,<hr>
<p>A paginação é um recurso que permite dividir grandes conjuntos de dados em páginas facilitando a visualização e a navegação para o usuário, é amplamente utilizado em interfaces que precisam lidar com grandes volumes de dados.</p>
<p>Para criar um componete de paginação de exemplo utilizarei o vite:</p>
<pre><code class="language-shell">npm create vite@latest paginate -- --template
</code></pre>
<p>No próximo passo escolher react:</p>
<pre><code class="language-shell">? Select a framework: › - Use arrow-keys. Return to submit.
    Vanilla
    Vue
❯   React
    Preact
    Lit
    Svelte
    Others
</code></pre>
<p>No próximo passo escolher typescript:</p>
<pre><code class="language-shell">✔ Select a framework: › React
? Select a variant: › - Use arrow-keys. Return to submit.
    JavaScript
❯   TypeScript
    JavaScript + SWC
    TypeScript + SWC
</code></pre>
<p>Entrar na pasta e rodar o <code>npm install</code></p>
<pre><code class="language-shell">✔ Select a framework: › React
✔ Select a variant: › TypeScript

Scaffolding project in ~/Documentos/teste/paginate...

Done. Now run:

  cd paginate
  npm install
  npm run dev
</code></pre>
<p>Criar na raiz do projeto o arquivo <code>.eslintrc.json</code>, instalar o pacote a seguir:</p>
<pre><code class="language-shell">npm i -D @rocketseat/eslint-config
</code></pre>
<p>Abrir o arquivo <code>.eslintrc.json</code> e deixar conforme a seguir:</p>
<pre><code class="language-javascript">{
  "extends": "@rocketseat/eslint-config/react"
  // "extends": "@rocketseat/eslint-config/node"
}
</code></pre>
<p><a href="https://raw.githubusercontent.com/glaulher/example/paginate/src/data/mock-data.json">Baixe</a> o arquivo mock-data.json e coloque em <code>src/data/</code> , crie <code>Pagination.tsx</code> dentro de <code>src/</code>e deixe conforme a seguir:</p>
<pre><code class="language-javascript">import React from 'react'
import { usePagination, DOTS } from './usePagination'
import './pagination.scss'

type PaginationProps = {
  onPageChange: (page: number) => void
  totalCount: number
  siblingCount: number
  currentPage: number
  pageSize: number
  className: string
}

const Pagination = ({
  onPageChange,
  totalCount,
  siblingCount = 1,
  currentPage,
  pageSize,
}: PaginationProps) => {
  const paginationRange = usePagination({
    currentPage,
    totalCount,
    siblingCount,
    pageSize,
  })

  if (currentPage === 0 || paginationRange!.length &#x3C; 2) {
    return null
  }

  const onNext = () => {
    onPageChange(currentPage + 1)
  }

  const onPrevious = () => {
    onPageChange(currentPage - 1)
  }

  const lastPage = paginationRange![paginationRange!.length - 1]
  return (
    &#x3C;ul className="pagination-container">
      &#x3C;li
        className={`pagination-item ${currentPage === 1 &#x26;&#x26; 'disabled'}`}
        onClick={onPrevious}
      >
        &#x3C;div className="arrow left" />
      &#x3C;/li>
      {paginationRange!.map((pageNumber) => {
        if (pageNumber === DOTS) {
          return (
            &#x3C;li key={pageNumber} className="pagination-item dots">
              &#x26;#8230;
            &#x3C;/li>
          )
        }

        return (
          &#x3C;li
            className={`pagination-item ${
              pageNumber === currentPage &#x26;&#x26; 'selected'
            }`}
            onClick={() => onPageChange(Number(pageNumber))}
            key={pageNumber}
          >
            {pageNumber}
          &#x3C;/li>
        )
      })}
      &#x3C;li
        className={`pagination-item ${currentPage === lastPage &#x26;&#x26; 'disabled'}`}
        onClick={onNext}
      >
        &#x3C;div className="arrow right" />
      &#x3C;/li>
    &#x3C;/ul>
  )
}

export default Pagination
</code></pre>
<p>Crie <code>pagination.scss</code> dentro de <code>src/</code> deixando conforme abaixo:</p>
<pre><code class="language-javascript">.pagination-container {
  display: flex;
  list-style-type: none;

  .pagination-item {
    padding: 0 12px;
    height: 32px;
    text-align: center;
    margin: auto 4px;
    color: rgba(0, 0, 0, 0.87);
    display: flex;
    box-sizing: border-box;
    align-items: center;
    letter-spacing: 0.01071em;
    border-radius: 16px;
    line-height: 1.43;
    font-size: 13px;
    min-width: 32px;

    &#x26;.dots:hover {
      background-color: transparent;
      cursor: default;
    }
    &#x26;:hover {
      background-color: rgba(0, 0, 0, 0.04);
      cursor: pointer;
    }

    &#x26;.selected {
      background-color: rgba(0, 0, 0, 0.08);
    }

    .arrow {
      &#x26;::before {
        position: relative;
        /* top: 3pt; Remova essa linha do comentário para baixar os ícones conforme solicitado nos comentários*/
        content: '';
        /* Usando uma escala em, as setas terão o tamanho acompanhando a fonte */
        display: inline-block;
        width: 0.4em;
        height: 0.4em;
        border-right: 0.12em solid rgba(0, 0, 0, 0.87);
        border-top: 0.12em solid rgba(0, 0, 0, 0.87);
      }

      &#x26;.left {
        transform: rotate(-135deg) translate(-50%);
      }

      &#x26;.right {
        transform: rotate(45deg);
      }
    }

    &#x26;.disabled {
      pointer-events: none;

      .arrow::before {
        border-right: 0.12em solid rgba(0, 0, 0, 0.43);
        border-top: 0.12em solid rgba(0, 0, 0, 0.43);
      }

      &#x26;:hover {
        background-color: transparent;
        cursor: default;
      }
    }
  }
}
</code></pre>
<p>Instale o pacote <code>sass</code>:</p>
<pre><code class="language-shell">npm i sass
</code></pre>
<h4>Sobre Pagination:</h4>
<p>Pagination usa um hook personalizado chamado <code>usePagination</code> para calcular quais páginas devem ser exibidas e em que ordem.</p>
<p>O componente renderiza uma lista de números de página, com a página atual destacada. O usuário poderá navegar pelos resultados da lista dividida em várias páginas.</p>
<p>Propriedades do componente:</p>
<ul>
<li>onPageChange: uma função que será chamada quando o usuário clicar em um número de página. Ela recebe como parâmetro o número da página que o usuário selecionou.</li>
<li>totalCount: o número total de itens que serão paginados.</li>
<li>siblingCount: o número de links de página exibidos à esquerda e à direita do link da página atual. O padrão é 1.</li>
<li>currentPage: o número da página atual.</li>
<li>pageSize: o número de itens exibidos em cada página.</li>
</ul>
<p>O componente usa a função usePagination para gerar uma matriz de números de página que deve ser exibida ao usuário. Essa função recebe como parâmetros a página atual, o número total de itens, o número de links e o tamanho da página.</p>
<p>A função usePagination retorna uma matriz de números de página que deve ser exibida na interface do usuário. Ela também pode incluir um valor especial DOTS, que é usado para indicar que há mais páginas entre as que já estão sendo exibidas.</p>
<p>O componente usa o currentPage e o paginationRange para gerar a lista de números de página que serão exibidos para o usuário. Ele também usa as funções onNext e onPrevious para permitir que o usuário navegue para a próxima ou para a página anterior, respectivamente.</p>
<p>O componente renderiza a lista de números de página em uma lista não ordenada HTML (&#x3C;ul>), com cada número de página sendo um item de lista (&#x3C;li>). O item da lista atual é destacado com a classe CSS "selected".</p>
<p>O componente também renderiza setas para permitir que o usuário navegue para a próxima ou para a página anterior. Se o usuário estiver na primeira ou na última página, o componente desativa o link correspondente para que ele não possa ser clicado.</p>
<p>Crie <code>usePagination.ts</code> dentro de <code>src/</code>e deixe conforme a seguir:</p>
<pre><code class="language-javascript">import { useMemo } from 'react'

export const DOTS = '...'

interface Props {
  totalCount: number
  pageSize: number
  siblingCount: number
  currentPage: number
}

const range = (start: number, end: number) => {
  const length = end - start + 1
  return Array.from({ length }, (_, idx) => idx + start)
}

export const usePagination = ({
  totalCount,
  pageSize,
  siblingCount = 1,
  currentPage,
}: Props) => {
  const paginationRange = useMemo(() => {
    const totalPageCount = Math.ceil(totalCount / pageSize)

    const totalPageNumbers = siblingCount + 5

    if (totalPageNumbers >= totalPageCount) {
      return range(1, totalPageCount)
    }

    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1)
    const rightSiblingIndex = Math.min(
      currentPage + siblingCount,
      totalPageCount,
    )


    const shouldShowLeftDots = leftSiblingIndex > 2
    const shouldShowRightDots = rightSiblingIndex &#x3C; totalPageCount - 2

    const firstPageIndex = 1
    const lastPageIndex = totalPageCount

    if (!shouldShowLeftDots &#x26;&#x26; shouldShowRightDots) {
      const leftItemCount = 3 + 2 * siblingCount
      const leftRange = range(1, leftItemCount)

      return [...leftRange, DOTS, totalPageCount]
    }

    if (shouldShowLeftDots &#x26;&#x26; !shouldShowRightDots) {
      const rightItemCount = 3 + 2 * siblingCount
      const rightRange = range(
        totalPageCount - rightItemCount + 1,
        totalPageCount,
      )
      return [firstPageIndex, DOTS, ...rightRange]
    }

    if (shouldShowLeftDots &#x26;&#x26; shouldShowRightDots) {
      const middleRange = range(leftSiblingIndex, rightSiblingIndex)
      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]
    }
    return undefined
  }, [totalCount, pageSize, siblingCount, currentPage])

  return paginationRange
}

</code></pre>
<h4>Sobre usePagination:</h4>
<p>Este código é responsável por retornar uma lista de páginas a serem exibidas em um componente de paginação, dado um conjunto de parâmetros de entrada, como o número total de itens, o número de itens por página, o número de itens vizinhos a serem exibidos à esquerda e à direita da página atual e a página atual.</p>
<p>A função <code>range</code> é uma função que cria um array de números inteiros de um intervalo específico.</p>
<p>O hook calcula o número total de páginas necessárias, em seguida, calcula o número total de páginas que devem ser exibidas (incluindo páginas vizinhas e pontos de suspensão), que é definido como <code>siblingCount + 5</code>.</p>
<p>Se o número total de páginas for menor ou igual ao número total de páginas que devem ser exibidas, a função simplesmente retorna um array contendo todas as páginas de 1 a <code>totalPageCount</code>.</p>
<p>Se o número total de páginas for maior que o número total de páginas que devem ser exibidas, a função calculará quais páginas vizinhas devem ser exibidas com base na página atual e no número de páginas vizinhas desejadas. A função também calcula se os pontos de suspensão devem ser exibidos à esquerda ou à direita, com base nas páginas vizinhas calculadas anteriormente.</p>
<p>A função <code>useMemo</code> é usada para armazenar em cache o resultado da lista de páginas, garantindo que ela só seja recalculada quando as dependências (total de itens, número de itens por página, número de itens vizinhos e página atual) mudarem.</p>
<p>No final, o hook retorna a lista de páginas calculada.</p>
<p><img src="/assets/posts/paginate.gif" alt="gif pagination"></p>
6:["$","main",null,{"children":["$","div",null,{"className":"container mx-auto px-5","children":[["$","div",null,{"className":"flex justify-between items-center mb-20 mt-8","children":[["$","h2",null,{"className":"text-2xl md:text-4xl font-bold tracking-tight md:tracking-tighter leading-tight","children":["$","$Le",null,{"href":"/","className":"hover:underline","children":"Blog"}]}],["$","$Le",null,{"href":"/","children":["$","p",null,{"className":"text-sm dark:text-neutral-200 hover:text-sky-700 dark:hover:text-sky-700 flex items-center","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":2,"stroke":"currentColor","className":"w-4 h-4 mr-1","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M15 19l-7-7 7-7"}]}],"Voltar"]}]}]]}],["$","article",null,{"className":"mb-32","children":[[["$","h1",null,{"className":"text-5xl md:text-7xl lg:text-8xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left","children":"Componente de paginação em react"}],["$","div",null,{"className":"hidden md:block md:mb-12","children":["$","div",null,{"className":"flex items-center","children":[["$","$Lf",null,{"src":"/assets/blog/authors/glaulher.jpeg","width":48,"height":48,"className":" rounded-full mr-4","alt":"Glaulher Medeiros"}],["$","div",null,{"className":"text-xl font-bold","children":"Glaulher Medeiros"}]]}]}],["$","div",null,{"className":"mb-8 md:mb-16 sm:mx-0 flex items-center justify-center","children":["$","div",null,{"className":"sm:mx-0","children":["$","$Lf",null,{"src":"/assets/blog/post/PaginateBanner.png","loading":"lazy","alt":"Cover Image for Componente de paginação em react","className":"object-contain object-center rounded-md shadow-sm w-full max-w-[800] ","width":800,"height":800,"decoding":"async","data-nimg":"1"}]}]}],["$","div",null,{"className":"max-w-2xl mx-auto","children":[["$","div",null,{"className":"block md:hidden mb-6","children":["$","div",null,{"className":"flex items-center","children":[["$","$Lf",null,{"src":"/assets/blog/authors/glaulher.jpeg","width":48,"height":48,"className":" rounded-full mr-4","alt":"Glaulher Medeiros"}],["$","div",null,{"className":"text-xl font-bold","children":"Glaulher Medeiros"}]]}]}],["$","div",null,{"className":"mb-6 text-lg","children":["$","time",null,{"dateTime":"2023-03-14T16:34:00Z","children":"March\t14, 2023"}]}]]}]],["$","$L10",null,{"content":"$11"}]]}]]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Componente de paginação em react | Next.js Blog Example with Markdown"}],["$","meta","2",{"name":"description","content":"A statically generated blog example using Next.js and Markdown."}],["$","meta","3",{"property":"og:title","content":"Componente de paginação em react | Next.js Blog Example with Markdown"}],["$","meta","4",{"property":"og:description","content":"A statically generated blog example using Next.js and Markdown."}],["$","meta","5",{"property":"og:image","content":"https://glaulher.github.io/assets/blog/post/PaginateBanner.png"}],["$","meta","6",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","7",{"name":"twitter:title","content":"Componente de paginação em react | Next.js Blog Example with Markdown"}],["$","meta","8",{"name":"twitter:description","content":"A statically generated blog example using Next.js and Markdown."}],["$","meta","9",{"name":"twitter:image","content":"https://glaulher.github.io/assets/blog/post/PaginateBanner.png"}]]
8:null

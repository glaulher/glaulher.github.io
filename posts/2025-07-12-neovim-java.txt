1:"$Sreact.fragment"
2:I[78534,["742","static/chunks/742-565a7562c8d1d87c.js","177","static/chunks/app/layout-c2fa79d5b2cde0df.js"],"Providers"]
3:I[6538,["742","static/chunks/742-565a7562c8d1d87c.js","177","static/chunks/app/layout-c2fa79d5b2cde0df.js"],"WrapperHeader"]
4:I[15244,[],""]
5:I[43866,[],""]
7:I[86213,[],"OutletBoundary"]
9:I[86213,[],"MetadataBoundary"]
b:I[86213,[],"ViewportBoundary"]
d:I[34835,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/9a455a0bc55c7fd0.css","style"]
:HL["/_next/static/css/4639d7b613416f5d.css","style"]
0:{"P":null,"b":"9cIl7jHu78ZSjG1wSxdc4","p":"","c":["","posts","2025-07-12-neovim-java"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","2025-07-12-neovim-java","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9a455a0bc55c7fd0.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/favicon/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/favicon/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/favicon/safari-pinned-tab.svg","color":"#000000"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon/favicon.ico"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"msapplication-config","content":"/favicon/browserconfig.xml"}],["$","meta",null,{"name":"theme-color","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-slate-100\n            dark:bg-gray-900\n            dark:from-gray-900\n            dark:to-gray-800 \n            bg-gradient-to-r \n            h-screen \n            __className_e8ce0c","children":["$","$L2",null,{"children":[["$","$L3",null,{}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"bg-gray-700  mt-1 py-4","children":["$","div",null,{"className":"container mx-auto flex justify-center","children":["$","span",null,{"className":"mx-auto text-neutral-200","children":"¬© 2025 GrmDevTips"}]}]}]]}]}]]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","2025-07-12-neovim-java","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4639d7b613416f5d.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","cSxwJucyLKYQtyDeDfYRp",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[48173,["742","static/chunks/742-565a7562c8d1d87c.js","688","static/chunks/688-2ba1992c7a7e345a.js","858","static/chunks/app/posts/%5Bslug%5D/page-b06279caf317e001.js"],""]
f:I[87970,["742","static/chunks/742-565a7562c8d1d87c.js","688","static/chunks/688-2ba1992c7a7e345a.js","858","static/chunks/app/posts/%5Bslug%5D/page-b06279caf317e001.js"],"Image"]
10:I[85301,["742","static/chunks/742-565a7562c8d1d87c.js","688","static/chunks/688-2ba1992c7a7e345a.js","858","static/chunks/app/posts/%5Bslug%5D/page-b06279caf317e001.js"],"PostBody"]
11:T5457,<hr>
<h2>üõ†Ô∏è Desenvolver em Java com Neovim: √© poss√≠vel?</h2>
<p>Muita gente acredita que programar em Java exige uma infraestrutura pesada e uma IDE robusta, como o IntelliJ. De fato, essas ferramentas oferecem recursos poderosos. Mas ser√° que √© poss√≠vel ter uma experi√™ncia produtiva usando apenas o Neovim?</p>
<p>Desde que passei a usar distribui√ß√µes Linux no dia a dia, tenho experimentado o Neovim cada vez mais. VS Code e Neovim se tornaram meus editores preferidos e, ao estudar Java, decidi explorar a possibilidade de us√°-lo tamb√©m nessa linguagem. A complexidade do ecossistema Java e a depend√™ncia de ferramentas completas s√£o justamente os principais desafios.</p>
<p>Com os avan√ßos do Neovim, do protocolo de servidor de linguagem (LSP) e do protocolo de depura√ß√£o (DAP), √© totalmente vi√°vel transform√°-lo em um ambiente de desenvolvimento moderno para Java ‚Äî com navega√ß√£o de c√≥digo, autocompletar, refatora√ß√£o e at√© depura√ß√£o.</p>
<p>Neste post, vou mostrar como configurar o Neovim como uma verdadeira IDE para Java, utilizando jdtls, nvim-dap, springboot.nvim e outros plugins essenciais.</p>
<hr>
<h2>‚úÖ Requisitos iniciais</h2>
<h3>‚òï Estruturando o Suporte a Java no Kickstart.nvim</h3>
<ul>
<li>Neste guia, estamos utilizando o <a href="https://github.com/nvim-lua/kickstart.nvim"><strong>Kickstart.nvim</strong></a>, uma base altamente configur√°vel para Neovim em Lua, para esse tutorial, √© necess√°rio ter instalado o java e o maven no sistema. Com o Kickstart.nvim, criamos um arquivo em custom/plugins/java.lua</li>
</ul>
<h3>üöÄ O que esse arquivo faz?</h3>
<ul>
<li>Dentro do java.lua, realizamos a integra√ß√£o de v√°rias ferramentas e plugins para oferecer suporte completo a:
‚úÖ Linguagem via LSP (jdtls)
‚úÖ Framework Spring Boot via spring-boot.nvim
‚úÖ Depura√ß√£o com nvim-dap
‚úÖ Testes Java com java-test
‚úÖ Anota√ß√µes e suporte ao Lombok
‚úÖ Atalhos personalizados com which-key</li>
</ul>
<p>java.lua:</p>
<pre><code class="language-lua">-- This is the same as in lspconfig.configs.jdtls, but avoids
-- needing to require that when this module loads.
local mason_registry = require 'mason-registry'

-- Utility function to extend or override a config table, similar to the way
-- that Plugin.opts works.
---@param config table
---@param custom function | table | nil
local function extend_or_override(config, custom, ...)
  if type(custom) == 'function' then
    config = custom(config, ...) or config
  elseif custom then
    config = vim.tbl_deep_extend('force', config, custom) --[[@as table]]
  end
  return config
end

local function has_plugin(name)
  local ok, _ = pcall(require, name)
  return ok
end

return {

  -- Add java to treesitter.
  {
    'nvim-treesitter/nvim-treesitter',
    opts = { ensure_installed = { 'java' } },
  },

  --add springboot
  {
    'JavaHello/spring-boot.nvim',
    ft = { 'java', 'yaml', 'jproperties' },
    dependencies = {
      'mfussenegger/nvim-jdtls', -- or nvim-java, nvim-lspconfig
      'nvim-telescope/telescope.nvim', -- optional, for UI features like symbol picking. Other pickers (e.g., telescope.nvim) can also be used.
    },
    ---@type bootls.Config
    ---@diagnostic disable-next-line: missing-fields
    opts = {},
  },
  -- Ensure java debugger and test packages are installed.
  {
    'mfussenegger/nvim-dap',
    optional = true,
    opts = function()
      -- Simple configuration to attach to remote java debug process
      -- Taken directly from https://github.com/mfussenegger/nvim-dap/wiki/Java
      local dap = require 'dap'
      dap.configurations.java = {
        {
          type = 'java',
          request = 'attach',
          name = 'Debug (Attach) - Remote',
          hostName = '127.0.0.1',
          port = 5005,
        },
      }
    end,
    dependencies = {
      {
        'mason-org/mason.nvim',
        opts = { ensure_installed = {} },
      },
    },
  },

  -- Configure nvim-lspconfig to install the server automatically via mason, but
  -- defer actually starting it to our configuration of nvim-jtdls below.
  {
    'neovim/nvim-lspconfig',
    dependencies = {
      {
        'mason-org/mason-lspconfig.nvim',

        config = function()
          require('mason-lspconfig').setup {
            -- ensure_installed = { 'vscode-spring-boot-tools', 'jdtls' }, -- explicitly set to an empty table (Kickstar
            ensure_installed = {},
            automatic_enable = {
              exclude = { 'jdtls' },
            },
          }
        end,
      },
    },
    opts = {
      -- make sure mason installs the server
      servers = {
        jdtls = {},
      },
      setup = {
        jdtls = function()
          return true -- avoid duplicate servers
        end,
      },
    },
  },

  -- Set up nvim-jdtls to attach to java files.
  {
    'mfussenegger/nvim-jdtls',
    dependencies = { 'folke/which-key.nvim' },
    ft = { 'java' },
    opts = function()
      --  local cmd = { vim.fn.exepath 'jdtls' }
      local lombok_jar = vim.fn.expand '$MASON' .. '/share/jdtls/lombok.jar'

      -- Verify the file actually exists
      if vim.fn.filereadable(lombok_jar) == 0 then
        vim.notify('lombok.jar not found at: ' .. lombok_jar, vim.log.levels.WARN)
        lombok_jar = ''
      end

      -- Fallback configuration if lombok.jar isn't found
      if lombok_jar == '' then
        vim.notify('Using jdtls without lombok support', vim.log.levels.WARN)
        return {
          root_dir = require('lspconfig').util.root_pattern('.git', 'mvnw', 'gradlew'),
          cmd = { vim.fn.exepath 'jdtls' },
          -- other default configurations...
        }
      end

      return {
        -- How to find the root dir for a given filename. The default comes from
        -- lspconfig which provides a function specifically for java projects.

        root_dir = require('lspconfig').util.root_pattern('.git', 'mvnw', 'gradlew', 'pom.xml'),
        -- How to find the project name for a given root dir.
        project_name = function(root_dir)
          return root_dir and vim.fs.basename(root_dir) or 'default'
        end,

        -- Where are the config and workspace dirs for a project?
        jdtls_config_dir = function(project_name)
          return vim.fn.stdpath 'cache' .. '/jdtls/' .. project_name .. '/config'
        end,
        jdtls_workspace_dir = function(project_name)
          return vim.fn.stdpath 'cache' .. '/jdtls/' .. project_name .. '/workspace'
        end,

        -- How to run jdtls. This can be overridden to a full java command-line
        -- if the Python wrapper script doesn't suffice.
        --  cmd = cmd,
        -- Command for starting jdtls with Lombok support
        cmd = {
          vim.fn.exepath 'jdtls',
          string.format('--jvm-arg=-javaagent:%s', lombok_jar),
        },
        full_cmd = function(opts)
          local fname = vim.api.nvim_buf_get_name(0)
          local root_dir = opts.root_dir(fname)
          local project_name = opts.project_name(root_dir)
          local full_cmd = vim.deepcopy(opts.cmd)
          if project_name then
            vim.list_extend(full_cmd, {
              '-configuration',
              opts.jdtls_config_dir(project_name),
              '-data',
              opts.jdtls_workspace_dir(project_name),
            })
          end
          return full_cmd
        end,

        -- These depend on nvim-dap, but can additionally be disabled by setting false here.
        dap = { hotcodereplace = 'auto', config_overrides = {} },
        -- Can set this to false to disable main class scan, which is a performance killer for large project
        dap_main = {},
        test = true,
        settings = {
          java = {
            inlayHints = {
              parameterNames = {
                enabled = 'all',
              },
            },
          },
        },
      }
    end,
    config = function(_, opts)
      -- Find the extra bundles that should be passed on the jdtls command-line
      -- if nvim-dap is enabled with java debug/test.
      local bundles = {} ---@type string[]

      --  vim.list_extend(bundles, require('spring_boot').java_extensions())
      local addAll = function(target, insertion)
        for _, value in pairs(insertion) do
          table.insert(target, value)
        end
      end
      if has_plugin 'spring_boot' then
        vim.api.nvim_create_user_command('SpringBootSymbols', function(_)
          require('telescope.builtin').lsp_workspace_symbols {}
        end, { nargs = 0 })

        local spring_boot = require 'spring_boot'
        addAll(bundles, spring_boot.java_extensions())
      end

      if opts.dap and mason_registry.is_installed 'java-debug-adapter' then
        local java_dbg_path = vim.fn.expand '$MASON' .. '/packages/java-debug-adapter'

        local jar_patterns = {
          java_dbg_path .. '/extension/server/com.microsoft.java.debug.plugin-*.jar',
        }
        -- java-test also depends on java-debug-adapter.
        if opts.test and mason_registry.is_installed 'java-test' then
          local java_test_path = vim.fn.expand '$MASON' .. '/packages/java-test'
          vim.list_extend(jar_patterns, {
            java_test_path .. '/extension/server/*.jar',
          })
        end
        for _, jar_pattern in ipairs(jar_patterns) do
          for _, bundle in ipairs(vim.split(vim.fn.glob(jar_pattern), '\n')) do
            table.insert(bundles, bundle)
          end
        end
      end
      local function attach_jdtls()
        local fname = vim.api.nvim_buf_get_name(0)
        local root_dir = opts.root_dir(fname)

        -- Configuration can be augmented and overridden by opts.jdtls
        local config = extend_or_override({
          cmd = opts.full_cmd(opts),
          root_dir = root_dir,
          init_options = {
            bundles = bundles,
          },
          workspace_folders = {
            {
              name = opts.project_name(root_dir),
              uri = 'file://' .. vim.fn.fnamemodify(root_dir, ':p'):gsub(' ', '%%20'),
            },
          },
          settings = opts.settings,
          -- enable CMP capabilities
          capabilities = has_plugin 'cmp-nvim-lsp' and require('cmp_nvim_lsp').default_capabilities() or nil,
        }, opts.jdtls)

        -- Existing server will be reused if the root_dir matches.
        require('jdtls').start_or_attach(config)
        -- not need to require("jdtls.setup").add_commands(), start automatically adds commands
      end

      -- Attach the jdtls for each java buffer. HOWEVER, this plugin loads
      -- depending on filetype, so this autocmd doesn't run for the first file.
      -- For that, we call directly below.
      vim.api.nvim_create_autocmd('FileType', {
        pattern = { 'java' },
        callback = attach_jdtls,
      })

      -- Setup keymap and dap after the lsp is fully attached.
      -- https://github.com/mfussenegger/nvim-jdtls#nvim-dap-configuration
      -- https://neovim.io/doc/user/lsp.html#LspAttach
      vim.api.nvim_create_autocmd('LspAttach', {
        callback = function(args)
          local client = vim.lsp.get_client_by_id(args.data.client_id)
          if client and client.name == 'jdtls' then
            local wk = require 'which-key'
            wk.add {
              {
                mode = 'n',
                buffer = args.buf,
                { '&#x3C;leader>cx', group = 'extract' },
                { '&#x3C;leader>cxv', require('jdtls').extract_variable_all, desc = 'Extract Variable' },
                { '&#x3C;leader>cxc', require('jdtls').extract_constant, desc = 'Extract Constant' },
                { '&#x3C;leader>cgs', require('jdtls').super_implementation, desc = 'Goto Super' },
                { '&#x3C;leader>cgS', require('jdtls.tests').goto_subjects, desc = 'Goto Subjects' },
                { '&#x3C;leader>co', require('jdtls').organize_imports, desc = 'Organize Imports' },
              },
            }
            wk.add {
              {
                mode = 'v',
                buffer = args.buf,
                { '&#x3C;leader>cx', group = 'extract' },
                {
                  '&#x3C;leader>cxm',
                  [[&#x3C;ESC>&#x3C;CMD>lua require('jdtls').extract_method(true)&#x3C;CR>]],
                  desc = 'Extract Method',
                },
                {
                  '&#x3C;leader>cxv',
                  [[&#x3C;ESC>&#x3C;CMD>lua require('jdtls').extract_variable_all(true)&#x3C;CR>]],
                  desc = 'Extract Variable',
                },
                {
                  '&#x3C;leader>cxc',
                  [[&#x3C;ESC>&#x3C;CMD>lua require('jdtls').extract_constant(true)&#x3C;CR>]],
                  desc = 'Extract Constant',
                },
              },
            }

            if has_plugin 'mason.nvim' then
              if opts.dap and has_plugin 'nvim-dap' and mason_registry.is_installed 'java-debug-adapter' then
                -- custom init for Java debugger
                require('jdtls').setup_dap(opts.dap)
                if opts.dap_main then
                  require('jdtls.dap').setup_dap_main_class_configs(opts.dap_main)
                end

                -- Java Test require Java debugger to work
                if opts.test and mason_registry.is_installed 'java-test' then
                  -- custom keymaps for Java test runner (not yet compatible with neotest)
                  wk.add {
                    {
                      mode = 'n',
                      buffer = args.buf,
                      { '&#x3C;leader>t', group = 'test' },
                      {
                        '&#x3C;leader>tt',
                        function()
                          require('jdtls.dap').test_class {
                            config_overrides = type(opts.test) ~= 'boolean' and opts.test.config_overrides or nil,
                          }
                        end,
                        desc = 'Run All Test',
                      },
                      {
                        '&#x3C;leader>tr',
                        function()
                          require('jdtls.dap').test_nearest_method {
                            config_overrides = type(opts.test) ~= 'boolean' and opts.test.config_overrides or nil,
                          }
                        end,
                        desc = 'Run Nearest Test',
                      },
                      { '&#x3C;leader>tT', require('jdtls.dap').pick_test, desc = 'Run Test' },
                    },
                  }
                end
              end
            end

            -- User can set additional keymaps in opts.on_attach
            if opts.on_attach then
              opts.on_attach(args)
            end
          end
        end,
      })

      -- Avoid race condition by calling attach the first time, since the autocmd won't fire.
      attach_jdtls()
    end,
  },
}

</code></pre>
<h3>üì¶ Entedendo os componentes principais:</h3>
<ul>
<li>Treesitter Adicionamos suporte √† linguagem Java para realce de sintaxe mais preciso:</li>
</ul>
<pre><code class="language-lua">-- N√£o precisa copiar ja est√° declarado no java.lua.
{
  'nvim-treesitter/nvim-treesitter',
  opts = { ensure_installed = { 'java' } },
},
</code></pre>
<ul>
<li>üéØ Spring Boot Integration
Integramos o plugin spring-boot.nvim para melhorar a experi√™ncia com aplica√ß√µes Spring Boot, com suporte a YAML e arquivos .properties.</li>
</ul>
<pre><code class="language-lua">-- N√£o precisa copiar ja est√° declarado no java.lua.
{
  'JavaHello/spring-boot.nvim',
  ft = { 'java', 'yaml', 'jproperties' },
  dependencies = {
    'mfussenegger/nvim-jdtls',
    'nvim-telescope/telescope.nvim',
  },
  opts = {},
}
</code></pre>
<ul>
<li>üß† JDTLS ‚Äì Java Language Server
Configuramos o JDTLS como servidor LSP, com suporte ao Lombok, pastas de cache e inicializa√ß√£o via autocmd:</li>
</ul>
<pre><code class="language-lua">-- N√£o precisa copiar ja est√° declarado no java.lua.
cmd = {
  vim.fn.exepath 'jdtls',
  string.format('--jvm-arg=-javaagent:%s', lombok_jar),
}
</code></pre>
<p>O root do projeto √© detectado com:</p>
<pre><code class="language-lua">-- N√£o precisa copiar ja est√° declarado no java.lua.
root_dir = require('lspconfig').util.root_pattern('.git', 'mvnw', 'gradlew', 'pom.xml')
</code></pre>
<ul>
<li>üêû Depura√ß√£o com DAP
Utilizamos o nvim-dap para depura√ß√£o remota e testes com JDTLS:</li>
</ul>
<pre><code class="language-lua">-- N√£o precisa copiar ja est√° declarado no java.lua.
dap.configurations.java = {
  {
    type = 'java',
    request = 'attach',
    name = 'Debug (Attach) - Remote',
    hostName = '127.0.0.1',
    port = 5005,
  },
}
</code></pre>
<ul>
<li>üî° Keymaps para produtividade
Atalhos definidos com which-key.nvim:</li>
</ul>
<p>‚ûú cxv ‚Üí Extrair vari√°vel</p>
<p>‚ûú cxc ‚Üí Extrair constante</p>
<p>‚ûú cxm ‚Üí Extrair m√©todo (modo visual)</p>
<p>‚ûú co ‚Üí Organizar imports</p>
<p>‚ûú tt ‚Üí Executar todos os testes da classe</p>
<p>‚ûú tr ‚Üí Executar o teste mais pr√≥ximo</p>
<p>‚ûú tT ‚Üí Escolher qual teste rodar</p>
<ul>
<li>üìÅ Detec√ß√£o autom√°tica de projetos
Atrav√©s de root_pattern, o Neovim reconhece o projeto com base em arquivos como:</li>
</ul>
<p>‚ûú  .git</p>
<p>‚ûú  mvnw</p>
<p>‚ûú  gradlew</p>
<p>‚ûú  pom.xml</p>
<h2>‚ûïPlus:</h2>
<h3>‚öôÔ∏è Springtime: Criando projetos Spring Boot</h3>
<p>Adicione ao init.lua dentro de custom/plugins:</p>
<pre><code class="language-lua"> {
   'javiorfo/nvim-springtime',
   lazy = true,
   cmd = { 'Springtime', 'SpringtimeUpdate' },
   dependencies = {
     'javiorfo/nvim-popcorn',
     'javiorfo/nvim-spinetta',
     'hrsh7th/nvim-cmp',
   },
   build = function()
     require('springtime.core').update()
   end,
 }, 
</code></pre>
<h3>üõ† Ô∏èAdicionar a instala√ß√£o autom√°tica dos servidores:</h3>
<ul>
<li>Editar o init.lua principal na linha que cont√©m:</li>
</ul>
<pre><code class="language-lua"> local ensure_installed = vim.tbl_keys(servers or {})
      vim.list_extend(ensure_installed, {
        'stylua', -- Used to format Lua code
      })
</code></pre>
<ul>
<li>Deixando conforme abaixo :</li>
</ul>
<pre><code class="language-lua"> local ensure_installed = vim.tbl_keys(servers or {})
     vim.list_extend(ensure_installed, {
       'stylua', -- Used to format Lua code
       'vscode-spring-boot-tools',
       'jdtls',
       'java-debug-adapter',
       'java-test',
       'google-java-format',
       'sonarlint-language-server', -- Used to format java
     })
</code></pre>
<h3>üßπ SonarLint: Lint para Java</h3>
<p>Criar o arquivo <code>custom/plugins/sonarlint.lua</code>:</p>
<pre><code class="language-lua">
return {
  'schrieveslaach/sonarlint.nvim',
  dependencies = { 'neovim/nvim-lspconfig' },
  config = function()
    require('sonarlint').setup {
      server = {
        cmd = {
          'sonarlint-language-server',
          '-stdio',
          '-analyzers',
          vim.fn.expand(vim.fn.getenv 'MASON' .. '/share/sonarlint-analyzers/sonarjava.jar'),
          vim.fn.expand(vim.fn.getenv 'MASON' .. '/share/sonarlint-analyzers/sonarcfamily.jar'),
          vim.fn.expand(vim.fn.getenv 'MASON' .. '/share/sonarlint-analyzers/sonarpython.jar'),
        },
      },
      filetypes = { 'java' },
    }
  end,
}
</code></pre>
<h3>üßº Autoformata√ß√£o com google-java-format</h3>
<p>No arquivo kickstart/plugins/conform.lua, adicione <code>java = { 'google-java-format' }</code>:</p>
<pre><code class="language-lua">
 formatters_by_ft = {
        lua = { 'stylua' },
        -- Conform can also run multiple formatters sequentially
        -- python = { "isort", "black" },
        --
        -- You can use 'stop_after_first' to run the first available formatter from the list
        -- javascript = { "prettierd", "prettier", stop_after_first = true },
        java = { 'google-java-format' },
      },
</code></pre>
<h3>‚òï Extras: Maven</h3>
<p>Para integra√ß√£o com o Maven, recomendamos o plugin maven.nvim, que permite executar comandos como compile, test, clean, entre outros, direto do Neovim.
Edit o custom/plugins/init.lua adicionando o plugin:</p>
<pre><code class="language-lua">{
  "eatgrass/maven.nvim",
  cmd = { "Maven", "MavenExec" },
  dependencies = "nvim-lua/plenary.nvim",
  config = function()
    require('maven').setup({
       executable = 'mvn',
    })
  end
},
</code></pre>
<h3>üß© Resultado final</h3>
<p><img src="/assets/posts/java-nvim.gif" alt="gif neovim"></p>
<p>Com isso, voc√™ ter√° um ambiente Java completo dentro do Neovim:</p>
<ul>
<li>‚úÖ Leve</li>
<li>‚úÖ R√°pido</li>
<li>‚úÖ Produtivo</li>
<li>‚úÖ Com suporte total a LSP, testes, depura√ß√£o, formata√ß√£o e lint</li>
<li>‚úÖ Ideal para projetos Spring Boot, Maven ou Java puro</li>
</ul>
<p>üìö Refer√™ncias</p>
<ul>
<li>
<p><a href="https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua"><strong>Kickstart.nvim</strong></a></p>
</li>
<li>
<p><a href="https://github.com/mfussenegger/nvim-jdtls"><strong>nvim-jdtls</strong></a></p>
</li>
<li>
<p><a href="https://github.com/JavaHello/spring-boot.nvim"><strong>spring-boot.nvim</strong></a></p>
</li>
<li>
<p><a href="https://github.com/javiorfo/nvim-springtime"><strong>nvim-springtime</strong></a></p>
</li>
<li>
<p><a href="https://gitlab.com/schrieveslaach/sonarlint.nvim"><strong>sonarlint.nvim</strong></a></p>
</li>
<li>
<p><a href="https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/plugins/extras/lang/java.lua"><strong>configura√ß√£o do jdtls</strong></a></p>
</li>
</ul>
6:["$","main",null,{"children":["$","div",null,{"className":"container mx-auto px-5","children":[["$","div",null,{"className":"flex justify-between items-center mb-20 mt-8","children":[["$","h2",null,{"className":"text-2xl md:text-4xl font-bold tracking-tight md:tracking-tighter leading-tight","children":["$","$Le",null,{"href":"/","className":"hover:underline","children":"Blog"}]}],["$","$Le",null,{"href":"/","children":["$","p",null,{"className":"text-sm dark:text-neutral-200 hover:text-sky-700 dark:hover:text-sky-700 flex items-center","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":2,"stroke":"currentColor","className":"w-4 h-4 mr-1","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M15 19l-7-7 7-7"}]}],"Voltar"]}]}]]}],["$","article",null,{"className":"mb-32","children":[[["$","h1",null,{"className":"text-5xl md:text-7xl lg:text-8xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left","children":"Java no Neovim"}],["$","div",null,{"className":"hidden md:block md:mb-12","children":["$","div",null,{"className":"flex items-center","children":[["$","$Lf",null,{"src":"/assets/blog/authors/glaulher.jpeg","width":48,"height":48,"className":" rounded-full mr-4","alt":"Glaulher Medeiros"}],["$","div",null,{"className":"text-xl font-bold","children":"Glaulher Medeiros"}]]}]}],["$","div",null,{"className":"mb-8 md:mb-16 sm:mx-0 flex items-center justify-center ","children":["$","div",null,{"className":"w-full max-w-[800px] max-h-[500px] ","children":["$","div",null,{"className":"sm:mx-0","children":["$","$Lf",null,{"src":"/assets/blog/post/nvimjava.webp","alt":"Cover Image for Java no Neovim","className":"object-contain object-center w-auto h-auto rounded-md shadow-sm ","width":800,"height":800,"priority":true}]}]}]}],["$","div",null,{"className":"max-w-2xl mx-auto","children":[["$","div",null,{"className":"block md:hidden mb-6","children":["$","div",null,{"className":"flex items-center","children":[["$","$Lf",null,{"src":"/assets/blog/authors/glaulher.jpeg","width":48,"height":48,"className":" rounded-full mr-4","alt":"Glaulher Medeiros"}],["$","div",null,{"className":"text-xl font-bold","children":"Glaulher Medeiros"}]]}]}],["$","div",null,{"className":"mb-6 text-lg","children":["$","time",null,{"children":"12 de julho de 2025"}]}]]}]],["$","$L10",null,{"content":"$11"}]]}]]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Java no Neovim | Meu blog sobre tecnologia utilizando Next.js and Markdown."}],["$","meta","2",{"name":"description","content":"Meu blog sobre tecnologia utilizando Next.js and Markdown."}],["$","meta","3",{"property":"og:title","content":"Java no Neovim | Meu blog sobre tecnologia utilizando Next.js and Markdown."}],["$","meta","4",{"property":"og:description","content":"Meu blog sobre tecnologia utilizando Next.js and Markdown."}],["$","meta","5",{"property":"og:image","content":"https://glaulher.github.io/assets/blog/post/nvimjava.webp"}],["$","meta","6",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","7",{"name":"twitter:title","content":"Java no Neovim | Meu blog sobre tecnologia utilizando Next.js and Markdown."}],["$","meta","8",{"name":"twitter:description","content":"Meu blog sobre tecnologia utilizando Next.js and Markdown."}],["$","meta","9",{"name":"twitter:image","content":"https://glaulher.github.io/assets/blog/post/nvimjava.webp"}]]
8:null
